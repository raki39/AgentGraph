"""
Teste b√°sico para validar a funcionalidade de gr√°ficos
"""
import asyncio
import logging
import pandas as pd
from typing import Dict, Any

# Configurar logging
logging.basicConfig(level=logging.INFO)

# Importar fun√ß√µes necess√°rias
from agents.tools import detect_query_type, generate_graph_type_context, extract_sql_query_from_response
from nodes.graph_selection_node import graph_selection_node
from nodes.graph_generation_node import graph_generation_node, generate_graph

async def test_query_detection():
    """Testa detec√ß√£o de tipos de query"""
    print("\n=== TESTE: Detec√ß√£o de Tipos de Query ===")
    
    test_queries = [
        "Mostre os dados de vendas",
        "Gere um gr√°fico de vendas por m√™s",
        "Criar gr√°fico de barras com os produtos",
        "Visualizar dados em pizza",
        "Plotar gr√°fico de linha temporal",
        "Prever vendas futuras",
        "Mostrar tabela de clientes"
    ]
    
    for query in test_queries:
        query_type = detect_query_type(query)
        print(f"Query: '{query}' -> Tipo: {query_type}")

def test_sql_extraction():
    """Testa extra√ß√£o de query SQL"""
    print("\n=== TESTE: Extra√ß√£o de Query SQL ===")

    # Incluir a resposta real que causou o problema
    real_response = """Para identificar as marcas com os produtos mais caros, primeiro, vou extrair os produtos com seus pre√ßos e marcas. Em seguida, ordenarei os resultados pelo pre√ßo em ordem decrescente para encontrar os mais caros.

Passo 1: Extrair marcas e pre√ßos dos produtos.
```sql
SELECT MARCA_PRODUTO, MAX(CAST(PRECO_VISTA AS FLOAT)) AS PRECO_MAXIMO
FROM tabela
GROUP BY MARCA_PRODUTO
ORDER BY PRECO_MAXIMO DESC
LIMIT 40;
```
Agora, vou executar a consulta."""

    test_responses = [
        real_response,  # Resposta real que causou o problema
        "```sql\nSELECT produto, SUM(vendas) FROM tabela GROUP BY produto;\n```",
        "A query SQL √©: SELECT * FROM clientes WHERE idade > 25;",
        "Query: SELECT data, valor FROM vendas ORDER BY data;",
        "Aqui est√° o resultado:\n```\nSELECT categoria, COUNT(*) FROM produtos GROUP BY categoria\n```",
        "Resposta sem SQL v√°lida"
    ]

    for i, response in enumerate(test_responses):
        sql_query = extract_sql_query_from_response(response)
        print(f"Teste {i+1}: SQL extra√≠da: {sql_query}")
        if i == 0:  # Resposta real
            print(f"  -> Resposta real: {'‚úÖ SUCESSO' if sql_query else '‚ùå FALHOU'}")

def test_graph_context_generation():
    """Testa gera√ß√£o de contexto para gr√°ficos"""
    print("\n=== TESTE: Gera√ß√£o de Contexto de Gr√°fico ===")
    
    # Criar DataFrame de exemplo
    df_sample = pd.DataFrame({
        'produto': ['A', 'B', 'C'],
        'vendas': [100, 200, 150],
        'data': pd.to_datetime(['2024-01-01', '2024-01-02', '2024-01-03'])
    })
    
    user_query = "Gere um gr√°fico de vendas por produto"
    sql_query = "SELECT produto, SUM(vendas) as vendas FROM tabela GROUP BY produto"
    columns = ['produto', 'vendas']
    
    context = generate_graph_type_context(user_query, sql_query, columns, df_sample)
    print(f"Contexto gerado (primeiros 200 chars): {context[:200]}...")

async def test_graph_generation():
    """Testa gera√ß√£o de gr√°ficos"""
    print("\n=== TESTE: Gera√ß√£o de Gr√°ficos ===")
    
    # Criar DataFrame de teste
    df_test = pd.DataFrame({
        'categoria': ['Eletr√¥nicos', 'Roupas', 'Casa', 'Livros'],
        'vendas': [1500, 800, 1200, 400],
        'lucro': [300, 160, 240, 80]
    })
    
    graph_types = ['bar_vertical', 'pie', 'line_simple', 'bar_grouped']
    
    for graph_type in graph_types:
        try:
            print(f"Testando gr√°fico: {graph_type}")
            image = await generate_graph(df_test, graph_type, f"Teste {graph_type}")
            
            if image:
                print(f"‚úÖ Gr√°fico {graph_type} gerado com sucesso")
            else:
                print(f"‚ùå Falha ao gerar gr√°fico {graph_type}")
                
        except Exception as e:
            print(f"‚ùå Erro ao gerar gr√°fico {graph_type}: {e}")

async def test_graph_nodes():
    """Testa n√≥s de gr√°fico"""
    print("\n=== TESTE: N√≥s de Gr√°fico ===")
    
    # Estado de teste
    test_state = {
        "user_input": "Gere um gr√°fico de vendas por categoria",
        "query_type": "sql_query_graphic",
        "response": "```sql\nSELECT categoria, SUM(vendas) as total_vendas FROM produtos GROUP BY categoria;\n```",
        "agent_id": "test_agent",
        "engine_id": "test_engine",
        "cache_id": "test_cache",
        "error": None
    }
    
    try:
        # Teste do n√≥ de sele√ß√£o (sem ObjectManager real)
        print("Testando n√≥ de sele√ß√£o de gr√°fico...")
        # result_state = await graph_selection_node(test_state)
        # print(f"Estado ap√≥s sele√ß√£o: {result_state.get('graph_type', 'N√£o definido')}")
        print("‚ö†Ô∏è  Teste de n√≥ de sele√ß√£o requer ObjectManager configurado")
        
        # Teste do n√≥ de gera√ß√£o (sem ObjectManager real)
        print("Testando n√≥ de gera√ß√£o de gr√°fico...")
        # result_state = await graph_generation_node(test_state)
        # print(f"Gr√°fico gerado: {result_state.get('graph_generated', False)}")
        print("‚ö†Ô∏è  Teste de n√≥ de gera√ß√£o requer ObjectManager configurado")
        
    except Exception as e:
        print(f"‚ùå Erro nos testes de n√≥s: {e}")

def test_integration_flow():
    """Testa fluxo de integra√ß√£o"""
    print("\n=== TESTE: Fluxo de Integra√ß√£o ===")
    
    # Simular fluxo completo
    user_queries = [
        "Mostre um gr√°fico de vendas por m√™s",
        "Criar gr√°fico de pizza com categorias",
        "Plotar linha temporal de receitas",
        "Visualizar dados em barras horizontais"
    ]
    
    for query in user_queries:
        print(f"\n--- Processando: '{query}' ---")
        
        # 1. Detec√ß√£o
        query_type = detect_query_type(query)
        print(f"1. Tipo detectado: {query_type}")
        
        # 2. Simula√ß√£o de resposta do AgentSQL
        if query_type == "sql_query_graphic":
            mock_sql_response = "```sql\nSELECT categoria, SUM(valor) FROM dados GROUP BY categoria;\n```"
            
            # 3. Extra√ß√£o de SQL
            sql_query = extract_sql_query_from_response(mock_sql_response)
            print(f"2. SQL extra√≠da: {sql_query}")
            
            # 4. Contexto para LLM
            if sql_query:
                df_mock = pd.DataFrame({'categoria': ['A', 'B'], 'valor': [100, 200]})
                context = generate_graph_type_context(query, sql_query, ['categoria', 'valor'], df_mock)
                print(f"3. Contexto gerado: ‚úÖ")
                print(f"4. Pr√≥ximo passo: Sele√ß√£o de gr√°fico pela LLM")
                print(f"5. Pr√≥ximo passo: Gera√ß√£o do gr√°fico")
            else:
                print("‚ùå Falha na extra√ß√£o de SQL")
        else:
            print("‚ÑπÔ∏è  Query n√£o requer gr√°fico")

async def main():
    """Fun√ß√£o principal de teste"""
    print("üß™ INICIANDO TESTES DE FUNCIONALIDADE DE GR√ÅFICOS")
    print("=" * 60)
    
    # Executar testes
    test_query_detection()
    test_sql_extraction()
    test_graph_context_generation()
    await test_graph_generation()
    await test_graph_nodes()
    test_integration_flow()
    
    print("\n" + "=" * 60)
    print("‚úÖ TESTES CONCLU√çDOS")
    print("\nPara testes completos, execute o sistema com:")
    print("python app.py")
    print("\nE teste com queries como:")
    print("- 'Gere um gr√°fico de vendas por categoria'")
    print("- 'Mostrar gr√°fico de pizza com dados'")
    print("- 'Criar visualiza√ß√£o em barras'")

if __name__ == "__main__":
    asyncio.run(main())
