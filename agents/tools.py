"""
Ferramentas para o agente SQL
"""
import time
import logging
import re
from typing import Dict, Any, Optional, List
from huggingface_hub import InferenceClient
from langchain_community.utilities import SQLDatabase
from langchain_openai import ChatOpenAI
from langchain_anthropic import ChatAnthropic
import pandas as pd

from utils.config import (
    HUGGINGFACE_API_KEY,
    OPENAI_API_KEY,
    ANTHROPIC_API_KEY,
    AVAILABLE_MODELS,
    REFINEMENT_MODELS,
    LLAMA_MODELS,
    MAX_TOKENS_MAP,
    OPENAI_MODELS,
    ANTHROPIC_MODELS,
    HUGGINGFACE_MODELS
)

# Cliente HuggingFace
hf_client = InferenceClient(
    provider="together",
    api_key=HUGGINGFACE_API_KEY
)

# Cliente OpenAI
openai_client = None
if OPENAI_API_KEY:
    openai_client = ChatOpenAI(
        api_key=OPENAI_API_KEY,
        temperature=0
    )

# Cliente Anthropic
anthropic_client = None
if ANTHROPIC_API_KEY:
    anthropic_client = ChatAnthropic(
        model="claude-3-5-sonnet-20241022",
        api_key=ANTHROPIC_API_KEY,
        temperature=0
    )

# Fun√ß√£o generate_initial_context removida - era redundante

def is_greeting(user_query: str) -> bool:
    """
    Verifica se a query do usu√°rio √© uma sauda√ß√£o
    
    Args:
        user_query: Query do usu√°rio
        
    Returns:
        True se for sauda√ß√£o, False caso contr√°rio
    """
    greetings = ["ol√°", "oi", "bom dia", "boa tarde", "boa noite", "oi, tudo bem?"]
    return user_query.lower().strip() in greetings

def detect_query_type(user_query: str) -> str:
    """
    Detecta o tipo de processamento necess√°rio para a query do usu√°rio

    Args:
        user_query: Pergunta do usu√°rio

    Returns:
        Tipo de processamento: 'sql_query', 'sql_query_graphic', 'prediction', 'chart'
    """
    query_lower = user_query.lower().strip()

    # Palavras-chave para diferentes tipos
    prediction_keywords = ['prever', 'predizer', 'previs√£o', 'forecast', 'predict', 'tend√™ncia', 'proje√ß√£o']

    # Palavras-chave para gr√°ficos - expandida para melhor detec√ß√£o
    chart_keywords = [
        'gr√°fico', 'grafico', 'chart', 'plot', 'visualizar', 'visualiza√ß√£o', 'visualizacao',
        'mostrar gr√°fico', 'mostrar grafico', 'gerar gr√°fico', 'gerar grafico',
        'criar gr√°fico', 'criar grafico', 'plotar', 'desenhar gr√°fico', 'desenhar grafico',
        'exibir gr√°fico', 'exibir grafico', 'fazer gr√°fico', 'fazer grafico',
        'gr√°fico de', 'grafico de', 'em gr√°fico', 'em grafico',
        'barras', 'linha', 'pizza', '√°rea', 'area', 'histograma',
        'scatter', 'dispers√£o', 'dispersao', 'boxplot', 'heatmap'
    ]

    # Verifica se h√° solicita√ß√£o de gr√°fico
    has_chart_request = any(keyword in query_lower for keyword in chart_keywords)

    # Verifica se h√° solicita√ß√£o de previs√£o
    has_prediction_request = any(keyword in query_lower for keyword in prediction_keywords)

    # L√≥gica de detec√ß√£o
    if has_prediction_request:
        return 'prediction'  # Futuro: agente de ML/previs√µes
    elif has_chart_request:
        return 'sql_query_graphic'  # SQL + Gr√°fico
    else:
        return 'sql_query'  # SQL normal

def prepare_processing_context(user_query: str, db_sample: pd.DataFrame) -> str:
    """
    Prepara o contexto inicial para o Processing Agent

    Args:
        user_query: Pergunta do usu√°rio
        db_sample: Amostra dos dados do banco

    Returns:
        Contexto formatado para o Processing Agent
    """
    # Obt√©m informa√ß√µes detalhadas das colunas
    column_info = []
    for col in db_sample.columns:
        col_data = db_sample[col].dropna()
        if len(col_data) > 0:
            # Exemplos de valores √∫nicos (m√°ximo 5)
            unique_values = col_data.unique()[:5]
            examples = ", ".join([str(v) for v in unique_values])

            # Tipo de dados
            dtype = str(col_data.dtype)

            # Estat√≠sticas b√°sicas para colunas num√©ricas
            stats = ""
            if col_data.dtype in ['int64', 'float64']:
                try:
                    min_val = col_data.min()
                    max_val = col_data.max()
                    stats = f" | Min: {min_val}, Max: {max_val}"
                except:
                    pass

            column_info.append(f"- {col} ({dtype}): {examples}{stats}")

    columns_description = "\n".join(column_info)

    # Adiciona algumas linhas de exemplo dos dados
    sample_rows = []
    num_rows_to_show = min(3, len(db_sample))
    for i in range(num_rows_to_show):
        row_data = []
        for col in db_sample.columns:
            value = db_sample.iloc[i][col]
            # Trunca valores muito longos
            str_value = str(value)
            if len(str_value) > 30:
                str_value = str_value[:27] + "..."
            row_data.append(f"{col}: {str_value}")
        sample_rows.append("  " + " | ".join(row_data))

    sample_data = "\n".join(sample_rows) if sample_rows else "Nenhuma linha de exemplo dispon√≠vel"

    context = f"""
    Voc√™ √© um especialista em SQL que deve analisar a pergunta do usu√°rio e gerar uma query SQL otimizada.

    INSTRU√á√ïES IMPORTANTES:
    1. Analise a pergunta do usu√°rio e o contexto dos dados
    2. Gere uma query SQL precisa e otimizada
    3. Use apenas as colunas que existem na tabela "tabela"
    4. Para c√°lculos complexos, use CTEs quando necess√°rio
    5. Inclua LIMIT quando apropriado para evitar resultados excessivos
    6. Considere os tipos de dados e valores de exemplo

    CONTEXTO DOS DADOS:
    Nome da tabela: tabela

    Colunas dispon√≠veis com tipos e exemplos:
    {columns_description}

    Exemplos de linhas dos dados:
    {sample_data}

    PERGUNTA DO USU√ÅRIO:
    {user_query}

    Responda somente nesse formato:

    Op√ß√£o de querySQL: [QuerySQL]
    Observa√ß√µes: [Observa√ß√µes]
    """

    return context.strip()

def prepare_sql_context(user_query: str, db_sample: pd.DataFrame, suggested_query: str = "", query_observations: str = "") -> str:
    """
    Prepara o contexto inicial para ser enviado diretamente ao agentSQL

    Args:
        user_query: Pergunta do usu√°rio
        db_sample: Amostra dos dados do banco
        suggested_query: Query SQL sugerida pelo Processing Agent (opcional)
        query_observations: Observa√ß√µes sobre a query sugerida (opcional)

    Returns:
        Contexto formatado para o agentSQL
    """
    import logging

    # Contexto base
    contexto_base = (
        "Voc√™ √© um assistente especializado em consultas SQL, gera√ß√£o de querySQL e an√°lise de dados.\n"
        "Sua tarefa √© responder √† pergunta do usu√°rio abaixo, gerando uma query SQL que retorne os dados necess√°rios para responder a pergunta.\n\n"
    )

    # Contexto com op√ß√£o de query (se dispon√≠vel)
    contexto_opcao_query = ""
    if suggested_query and suggested_query.strip():
        logging.info(f"[SQL CONTEXT] üéØ Incluindo query sugerida no contexto do SQL Agent")

        # Mant√©m formata√ß√£o original da query
        contexto_opcao_query = f"Op√ß√£o de querySQL:\n```sql\n{suggested_query}\n```\n\n"

        if query_observations and query_observations.strip():
            contexto_opcao_query += f"Observa√ß√µes:\n{query_observations}\n\n"

        contexto_opcao_query += "Voc√™ pode usar esta op√ß√£o de query se ela estiver correta, ou criar sua pr√≥pria query.\n\n"
        logging.info(f"[SQL CONTEXT] ‚úÖ Contexto do SQL Agent preparado COM sugest√£o de query")
    else:
        logging.info(f"[SQL CONTEXT] ‚ÑπÔ∏è Contexto do SQL Agent preparado SEM sugest√£o de query")

    # Monta contexto final
    context = contexto_base + contexto_opcao_query + f"Pergunta do usu√°rio: \n{user_query}"

    return context

async def refine_response_with_llm(
    user_question: str, 
    sql_response: str, 
    chart_md: str = ""
) -> str:
    """
    Refina a resposta usando um modelo LLM adicional
    
    Args:
        user_question: Pergunta original do usu√°rio
        sql_response: Resposta do agente SQL
        chart_md: Markdown de gr√°ficos (opcional)
        
    Returns:
        Resposta refinada
    """
    prompt = (
        f"Pergunta do usu√°rio:\n{user_question}\n\n"
        f"Resposta gerada pelo agente SQL:\n{sql_response}\n\n"
        "Sua tarefa √© refinar a resposta para deix√°-la mais clara, completa e compreens√≠vel em portugu√™s, "
        "mantendo a resposta original no in√≠cio do texto e adicionando insights √∫teis sobre log√≠stica de entregas de produtos, "
        "por exemplo: comparar com padr√µes t√≠picos, identificar poss√≠veis problemas ou sugerir a√ß√µes para melhorar atrasos, performance ou custos. "
        "Evite repetir informa√ß√µes sem necessidade e n√£o invente dados."
    )

    logging.info(f"[DEBUG] Prompt enviado ao modelo de refinamento:\n{prompt}\n")

    try:
        response = hf_client.chat.completions.create(
            model=REFINEMENT_MODELS["LLaMA 70B"],
            messages=[{"role": "system", "content": prompt}],
            max_tokens=1200,
            stream=False
        )
        improved_response = response["choices"][0]["message"]["content"]
        logging.info(f"[DEBUG] Resposta do modelo de refinamento:\n{improved_response}\n")
        return improved_response + ("\n\n" + chart_md if chart_md else "")

    except Exception as e:
        logging.error(f"[ERRO] Falha ao refinar resposta com LLM: {e}")
        return sql_response + ("\n\n" + chart_md if chart_md else "")

class CacheManager:
    """Gerenciador de cache para queries"""
    
    def __init__(self):
        self.query_cache: Dict[str, str] = {}
        self.history_log: List[Dict[str, Any]] = []
        self.recent_history: List[Dict[str, str]] = []
    
    def get_cached_response(self, query: str) -> Optional[str]:
        """Obt√©m resposta do cache"""
        return self.query_cache.get(query)
    
    def cache_response(self, query: str, response: str):
        """Armazena resposta no cache"""
        self.query_cache[query] = response
    
    def add_to_history(self, entry: Dict[str, Any]):
        """Adiciona entrada ao hist√≥rico"""
        self.history_log.append(entry)
    
    def update_recent_history(self, user_input: str, response: str):
        """Atualiza hist√≥rico recente"""
        self.recent_history.append({"role": "user", "content": user_input})
        self.recent_history.append({"role": "assistant", "content": response})
        
        # Mant√©m apenas as √∫ltimas 4 entradas (2 pares pergunta-resposta)
        if len(self.recent_history) > 4:
            self.recent_history.pop(0)
            self.recent_history.pop(0)
    
    def clear_cache(self):
        """Limpa todo o cache"""
        self.query_cache.clear()
        self.history_log.clear()
        self.recent_history.clear()
    
    def get_history(self) -> List[Dict[str, Any]]:
        """Retorna hist√≥rico completo"""
        return self.history_log

# ==================== FUN√á√ïES DE GR√ÅFICOS ====================

def generate_graph_type_context(user_query: str, sql_query: str, df_columns: List[str], df_sample: pd.DataFrame) -> str:
    """
    Gera contexto para LLM escolher o tipo de gr√°fico mais adequado

    Args:
        user_query: Pergunta original do usu√°rio
        sql_query: Query SQL gerada pelo agente
        df_columns: Lista de colunas retornadas pela query
        df_sample: Amostra dos dados para an√°lise

    Returns:
        Contexto formatado para a LLM
    """
    # Criar uma descri√ß√£o detalhada dos dados para ajudar a LLM a entender melhor a estrutura
    data_description = ""
    if not df_sample.empty:
        # Verificar tipos de dados de forma mais robusta
        numeric_cols = []
        date_cols = []
        categorical_cols = []

        for col in df_sample.columns:
            col_data = df_sample[col]

            # Verifica se √© num√©rico (incluindo strings que representam n√∫meros)
            try:
                # Tenta converter para num√©rico, tratando v√≠rgulas como separador decimal
                if col_data.dtype == 'object':
                    test_numeric = pd.to_numeric(col_data.astype(str).str.replace(',', '.'), errors='coerce')
                    if test_numeric.notna().sum() > len(col_data) * 0.8:  # 80% s√£o n√∫meros v√°lidos
                        numeric_cols.append(col)
                    else:
                        categorical_cols.append(col)
                elif pd.api.types.is_numeric_dtype(col_data):
                    numeric_cols.append(col)
                elif pd.api.types.is_datetime64_any_dtype(col_data) or 'data' in col.lower():
                    date_cols.append(col)
                else:
                    categorical_cols.append(col)
            except:
                categorical_cols.append(col)

        # Adicionar informa√ß√µes sobre os primeiros valores de cada coluna
        data_description = "\nAmostra dos dados (primeiras 3 linhas):\n"
        data_description += df_sample.head(3).to_string(index=False)

        # Adicionar an√°lise detalhada dos tipos de dados
        data_description += f"\n\nAn√°lise dos dados ({len(df_sample)} linhas total):"
        data_description += f"\n- Total de colunas: {len(df_sample.columns)}"

        if numeric_cols:
            data_description += f"\n- Colunas NUM√âRICAS ({len(numeric_cols)}): {', '.join(numeric_cols)}"
            # Adiciona informa√ß√£o sobre valores num√©ricos
            for col in numeric_cols[:2]:  # M√°ximo 2 colunas para n√£o ficar muito longo
                try:
                    if df_sample[col].dtype == 'object':
                        # Converte strings para n√∫meros
                        numeric_values = pd.to_numeric(df_sample[col].astype(str).str.replace(',', '.'), errors='coerce')
                        min_val, max_val = numeric_values.min(), numeric_values.max()
                    else:
                        min_val, max_val = df_sample[col].min(), df_sample[col].max()
                    data_description += f"\n  ‚Ä¢ {col}: valores de {min_val} a {max_val}"
                except:
                    pass

        if date_cols:
            data_description += f"\n- Colunas de DATA/TEMPO ({len(date_cols)}): {', '.join(date_cols)}"

        if categorical_cols:
            data_description += f"\n- Colunas CATEG√ìRICAS ({len(categorical_cols)}): {', '.join(categorical_cols)}"
            # Adiciona informa√ß√£o sobre categorias √∫nicas
            for col in categorical_cols[:3]:  # M√°ximo 3 colunas
                unique_count = df_sample[col].nunique()
                data_description += f"\n  ‚Ä¢ {col}: {unique_count} valores √∫nicos"

            # Destaque especial para m√∫ltiplas categ√≥ricas importantes
            if len(categorical_cols) >= 2 and len(numeric_cols) >= 1:
                data_description += f"\n\n‚ö†Ô∏è ATEN√á√ÉO: {len(categorical_cols)} colunas categ√≥ricas + {len(numeric_cols)} num√©rica(s) ‚Üí CONSIDERE GR√ÅFICO AGRUPADO (6) para mostrar m√∫ltiplas dimens√µes!"

    # Prompt ULTRA SIMPLIFICADO
    return (
        f"Escolha o gr√°fico mais adequado e de acordo com pergunta do usu√°rio e os dados:\n\n"
        f"COLUNAS RETORNADAS: {', '.join(df_columns)}\n\n"
        f"DADOS: {data_description}\n\n"
        f"PERGUNTA: {user_query}\n\n"
        f"OP√á√ïES DE GR√ÅFICOS::\n"
        f"1. Linha - evolu√ß√£o temporal\n"
        f"2. Multilinhas - m√∫ltiplas tend√™ncias\n"
        f"3. √Årea - volume temporal\n"
        f"4. Barras Verticais - comparar categorias (nomes curtos)\n"
        f"5. Barras Horizontais - comparar categorias (nomes longos)\n"
        f"6. Barras Agrupadas - m√∫ltiplas m√©tricas\n"
        f"7. Barras Empilhadas - partes de um todo\n"
        f"8. Pizza - propor√ß√µes (poucas categorias)\n"
        f"9. Dona - propor√ß√µes (muitas categorias)\n"
        f"10. Pizzas M√∫ltiplas - propor√ß√µes por grupos\n\n"
        f"Responda apenas o n√∫mero (1-10)."
        "\n\nINSTRU√á√ïES FINAIS:\n"
        "1. PRIMEIRO: Verifique se o usu√°rio especificou um tipo de gr√°fico na pergunta do usu√°rio\n"
        "2. SE SIM: Use o gr√°fico solicitado (consulte o mapeamento acima)\n"
        "3. SE N√ÉO: Escolha o gr√°fico mais adequado\n\n"
    )

def extract_sql_query_from_response(agent_response: str) -> Optional[str]:
    """
    Extrai a query SQL da resposta do agente SQL

    Args:
        agent_response: Resposta completa do agente SQL

    Returns:
        Query SQL extra√≠da ou None se n√£o encontrada
    """
    if not agent_response:
        return None

    # Padr√µes para encontrar SQL na resposta - ordem de prioridade
    sql_patterns = [
        # Padr√£o mais comum: ```sql ... ``` (multiline)
        r"```sql\s*(.*?)\s*```",
        # Padr√£o alternativo: ``` ... ``` com SELECT (multiline)
        r"```\s*(SELECT.*?)\s*```",
        # SELECT com m√∫ltiplas linhas at√© ponto e v√≠rgula
        r"(SELECT\s+.*?;)",
        # SELECT com m√∫ltiplas linhas at√© quebra dupla ou final
        r"(SELECT\s+.*?)(?:\n\s*\n|\n\s*$|\n\s*Agora|\n\s*Em seguida)",
        # Padr√µes com prefixos espec√≠ficos
        r"Query:\s*(SELECT.*?)(?:\n|$|;)",
        r"SQL:\s*(SELECT.*?)(?:\n|$|;)",
        r"Consulta:\s*(SELECT.*?)(?:\n|$|;)",
        # SELECT em uma linha
        r"(SELECT\s+[^\n]+)",
    ]

    for i, pattern in enumerate(sql_patterns):
        matches = re.findall(pattern, agent_response, re.DOTALL | re.IGNORECASE)
        if matches:
            # Pega a primeira query encontrada
            query = matches[0].strip()

            # Limpa a query
            query = clean_sql_query(query)

            # Verifica se √© uma query v√°lida
            if is_valid_sql_query(query):
                logging.info(f"[GRAPH] Query SQL extra√≠da (padr√£o {i+1}): {query[:100]}...")
                return query

    # Log da resposta para debug se n√£o encontrar SQL
    logging.warning(f"[GRAPH] N√£o foi poss√≠vel extrair query SQL. Resposta (primeiros 200 chars): {agent_response[:200]}...")
    return None

def clean_sql_query(query: str) -> str:
    """
    Limpa e normaliza a query SQL extra√≠da

    Args:
        query: Query SQL bruta

    Returns:
        Query SQL limpa
    """
    if not query:
        return ""

    # Remove espa√ßos extras e quebras de linha desnecess√°rias
    query = re.sub(r'\s+', ' ', query.strip())

    # Remove ponto e v√≠rgula no final se existir
    if query.endswith(';'):
        query = query[:-1].strip()

    # Remove aspas ou caracteres especiais no in√≠cio/fim
    query = query.strip('`"\'')

    return query

def is_valid_sql_query(query: str) -> bool:
    """
    Verifica se a string √© uma query SQL v√°lida

    Args:
        query: String para verificar

    Returns:
        True se for uma query SQL v√°lida
    """
    if not query or len(query.strip()) < 6:  # M√≠nimo para "SELECT"
        return False

    # Verifica se come√ßa com comando SQL v√°lido
    sql_commands = ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'WITH']
    query_upper = query.strip().upper()

    return any(query_upper.startswith(cmd) for cmd in sql_commands)
